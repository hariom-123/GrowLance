{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["data","i","push","Math","floor","random","App","x0","y0","yAxisLength","SVG_HEIGHT","xAxisY","barPlotWidth","SVG_WIDTH","length","id","width","height","x1","y1","x2","y2","stroke","x","y","Array","from","map","_","index","yValue","round","textAnchor","dataY","yRatio","dataYMax","class","sidePadding","fill","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","re_render","ReactDOM","render","StrictMode","document","getElementById","arr_data","N","j","temp","slice","sort_data","k","myVar","setInterval","clearInterval"],"mappings":"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","file":"static/js/main.e8400b19.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nconst SVG_WIDTH = 800;\nconst SVG_HEIGHT = 500;\n\nconst N = 20;\nvar data = [];\nfor(let i=0;i<N;i=i+1)\n{\n  data.push(20+ Math.floor(Math.random()*81));\n}\n\nfunction App() {\n  const x0 = 50;\n  const xAxisLength = SVG_WIDTH - x0 * 2;\n\n  const y0 = 50;\n  const yAxisLength = SVG_HEIGHT - y0 * 2;\n\n  const xAxisY = y0 + yAxisLength;\n  \n  const dataYMax=100;\n  const dataYMin=0;\n  const dataYRange = dataYMax - dataYMin;\n\n  const numYTicks = 5;\n\n  const barPlotWidth = xAxisLength / data.length;\n\n  return (\n    <div id='graph'>\n    <svg width={SVG_WIDTH} height={SVG_HEIGHT}>\n      {/* X axis */}\n      <line\n        x1={x0}\n        y1={xAxisY}\n        x2={x0 + xAxisLength}\n        y2={xAxisY}\n        stroke=\"grey\"\n        stroke-width=\"2px\"\n      />\n      <text x={x0 + xAxisLength + 5} y={xAxisY + 4}>\n        x\n      </text>\n\n      {/* Y axis */}\n      <line \n      x1={x0} \n      y1={y0} \n      x2={x0} \n      y2={y0 + yAxisLength} \n      stroke=\"grey\" \n      stroke-width=\"2px\"\n      />\n\n      {Array.from({ length: numYTicks }).map((_, index) => {\n        const y = y0 + index * (yAxisLength / numYTicks);\n\n        const yValue = Math.round(dataYMax - index * (dataYRange / numYTicks));\n\n        return (\n          <g key={index}>\n            <line x1={x0} y1={y} x2={x0 - 5} y2={y} stroke=\"grey\" />\n            <text x={x0 - 5} y={y + 5} textAnchor=\"end\">\n              {yValue}\n            </text>\n          </g>\n        );\n      })}\n      <text x={x0} y={y0 - 8} textAnchor=\"middle\">\n        y\n      </text>\n\n      {/* Bar plots */}\n      {data.map((dataY, index) => {\n        const x = x0 + index * barPlotWidth;\n\n        const yRatio = (dataY - dataYMin) / dataYRange;\n\n        const y = y0 + (1 - yRatio) * yAxisLength;\n        const height = yRatio * yAxisLength;\n\n        const sidePadding = 10;\n\n        return (\n          <g key={index}>\n            <rect class = \"bar\"\n              x={x + sidePadding / 2}\n              y={y}\n              width={barPlotWidth - sidePadding}\n              height={height}\n              fill=\"blue\"\n            />\n            <text x={x + barPlotWidth / 2} y={xAxisY + 16} textAnchor=\"middle\">\n              {index}\n            </text>\n            <text x={x + barPlotWidth / 2} y={xAxisY - 4*data[index] - 2 } textAnchor=\"middle\">\n              {data[index]}\n            </text>\n          </g>\n        );\n      })}\n      \n\n    </svg>\n    <h2>Pls click to create new random graph <a href=\"index.js\">Click!</a></h2>\n    </div>\n  );\n}\n\nexport { App,data};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App,data} from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// function to render the graph html\nfunction re_render(){\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\n// function store the states of array  of values during sorting\nvar arr_data = [];\nfunction sort_data()\n{\n  let N = data.length;\n\n  for(let i=0;i<N-1;i=i+1)\n  {\n    for(let j=0;j<N-1;j++)\n    {\n      if(data[j+1] < data[j])\n      {\n        let temp = data[j+1];\n        data[j+1]=data[j];\n        data[j] = temp;\n        // enter the current state to the arr_data\n        arr_data.push(data.slice()); \n        \n      }\n    }\n    \n  }\n}\n\n// render graph html initially\nre_render();\n// then apply sorting\nsort_data();\n\n// then display swapping operations\n// by rendering graph using stored stated\n\nlet k=0;\nlet myVar = setInterval(function() {\n  \n  if(k===arr_data.length)\n  clearInterval(myVar)\n\n  else\n  {\n    for(let i=0;i<data.length;i=i+1)\n    {\n      data[i]=arr_data[k][i];\n    }\n\n    k=k+1;\n\n    re_render();\n  }\n  \n}, 500);\n\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}