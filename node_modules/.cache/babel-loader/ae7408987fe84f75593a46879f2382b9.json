{"ast":null,"code":"var _jsxFileName = \"/home/hariom/my_project/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SVG_WIDTH = 400;\nconst SVG_HEIGHT = 300;\nconst data = [12, 14, 12, 4, 5, 80, 0];\n\nfunction App() {\n  const x0 = 50;\n  const xAxisLength = SVG_WIDTH - x0 * 2;\n  const y0 = 50;\n  const yAxisLength = SVG_HEIGHT - y0 * 2;\n  const xAxisY = y0 + yAxisLength;\n  const dataYMax = Math.max(...data);\n  const dataYMin = Math.min(...data);\n  const dataYRange = dataYMax - dataYMin;\n  const numYTicks = 5;\n  const barPlotWidth = xAxisLength / data.length;\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: SVG_WIDTH,\n    height: SVG_HEIGHT,\n    children: [/*#__PURE__*/_jsxDEV(\"line\", {\n      x1: x0,\n      y1: xAxisY,\n      x2: x0 + xAxisLength,\n      y2: xAxisY,\n      stroke: \"grey\",\n      \"stroke-width\": \"2px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: x0 + xAxisLength + 5,\n      y: xAxisY + 4,\n      children: \"x\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n      x1: x0,\n      y1: y0,\n      x2: x0,\n      y2: y0 + yAxisLength,\n      stroke: \"grey\",\n      \"stroke-width\": \"2px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), Array.from({\n      length: numYTicks\n    }).map((_, index) => {\n      const y = y0 + index * (yAxisLength / numYTicks);\n      const yValue = Math.round(dataYMax - index * (dataYRange / numYTicks));\n      return /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"line\", {\n          x1: x0,\n          y1: y,\n          x2: x0 - 5,\n          y2: y,\n          stroke: \"grey\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: x0 - 5,\n          y: y + 5,\n          textAnchor: \"end\",\n          children: yValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: x0,\n      y: y0 - 8,\n      textAnchor: \"middle\",\n      children: \"y\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), data.map((dataY, index) => {\n      const x = x0 + index * barPlotWidth;\n      const yRatio = (dataY - dataYMin) / dataYRange;\n      const y = y0 + (1 - yRatio) * yAxisLength;\n      const height = yRatio * yAxisLength;\n      const sidePadding = 10;\n      return /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n          x: x + sidePadding / 2,\n          y: y,\n          width: barPlotWidth - sidePadding,\n          height: height\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: x + barPlotWidth / 2,\n          y: xAxisY + 16,\n          textAnchor: \"middle\",\n          children: day\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/hariom/my_project/src/App.js"],"names":["React","SVG_WIDTH","SVG_HEIGHT","data","App","x0","xAxisLength","y0","yAxisLength","xAxisY","dataYMax","Math","max","dataYMin","min","dataYRange","numYTicks","barPlotWidth","length","Array","from","map","_","index","y","yValue","round","dataY","x","yRatio","height","sidePadding","day"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nconst SVG_WIDTH = 400;\nconst SVG_HEIGHT = 300;\n\nconst data = [12,14,12,4,5,80,0];\n\nfunction App() {\n  const x0 = 50;\n  const xAxisLength = SVG_WIDTH - x0 * 2;\n\n  const y0 = 50;\n  const yAxisLength = SVG_HEIGHT - y0 * 2;\n\n  const xAxisY = y0 + yAxisLength;\n  \n  const dataYMax=Math.max(...data);\n  const dataYMin=Math.min(...data);\n  const dataYRange = dataYMax - dataYMin;\n\n  const numYTicks = 5;\n\n  const barPlotWidth = xAxisLength / data.length;\n\n  return (\n    <svg width={SVG_WIDTH} height={SVG_HEIGHT}>\n      {/* X axis */}\n      <line\n        x1={x0}\n        y1={xAxisY}\n        x2={x0 + xAxisLength}\n        y2={xAxisY}\n        stroke=\"grey\"\n        stroke-width=\"2px\"\n      />\n      <text x={x0 + xAxisLength + 5} y={xAxisY + 4}>\n        x\n      </text>\n\n      {/* Y axis */}\n      <line \n      x1={x0} \n      y1={y0} \n      x2={x0} \n      y2={y0 + yAxisLength} \n      stroke=\"grey\" \n      stroke-width=\"2px\"\n      />\n\n      {Array.from({ length: numYTicks }).map((_, index) => {\n        const y = y0 + index * (yAxisLength / numYTicks);\n\n        const yValue = Math.round(dataYMax - index * (dataYRange / numYTicks));\n\n        return (\n          <g key={index}>\n            <line x1={x0} y1={y} x2={x0 - 5} y2={y} stroke=\"grey\" />\n            <text x={x0 - 5} y={y + 5} textAnchor=\"end\">\n              {yValue}\n            </text>\n          </g>\n        );\n      })}\n      <text x={x0} y={y0 - 8} textAnchor=\"middle\">\n        y\n      </text>\n\n      {/* Bar plots */}\n      {data.map((dataY, index) => {\n        const x = x0 + index * barPlotWidth;\n\n        const yRatio = (dataY - dataYMin) / dataYRange;\n\n        const y = y0 + (1 - yRatio) * yAxisLength;\n        const height = yRatio * yAxisLength;\n\n        const sidePadding = 10;\n\n        return (\n          <g key={index}>\n            <rect\n              x={x + sidePadding / 2}\n              y={y}\n              width={barPlotWidth - sidePadding}\n              height={height}\n            />\n            <text x={x + barPlotWidth / 2} y={xAxisY + 16} textAnchor=\"middle\">\n              {day}\n            </text>\n          </g>\n        );\n      })}\n      \n\n\n    </svg>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}